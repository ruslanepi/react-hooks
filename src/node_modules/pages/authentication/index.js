import React from 'react'
import {Link, Redirect} from 'react-router-dom'

import useFetch from 'hooks/useFetch'
import useLocalStorage from 'hooks/useLocalStorage'
import {CurrentUserContext} from 'contexts/currentUser'
import BackendErrorMesssages from 'pages/authentication/BackendErrorMesssages'

const Authentication = (props) => {

    /* состояние не меняется
* мы просто ререндерим компонент
* state это "снимок" данных в момент времени
*/

    const isLogin = props.match.path === '/login'
    const pageTitle = isLogin
        ? 'Sing in'
        : 'Sign Up'
    const descriptionLink = isLogin
        ? '/register'
        : '/login'
    const descriptionText = isLogin
        ? 'Need an account?'
        : 'Have an account?'
    const apiUrl = isLogin
        ? '/users/login'
        : '/users'

    //useState
    const [email,
        setEmail] = React.useState('')
    const [password,
        setPassword] = React.useState('')
    const [username,
        setUsername] = React.useState('')
    const [
        {
            response,
            isLoading,
            error
        },
        doFetch] = useFetch(apiUrl)
    const [isSuccessfullSubmit,
        setIsSuccessfullSubmit] = React.useState(false)
    const [token,
        setToken] = useLocalStorage('token')
    const [,
        setCurrentUserState] = React.useContext(CurrentUserContext)

    const handleSubmit = (e) => {
        e.preventDefault()

        const user = isLogin
            ? {
                email,
                password
            }
            : {
                email,
                password,
                username
            }
        doFetch({method: 'post', data: {
                user
            }})
    }

    React.useEffect(() => {
        if (!response) {
            return
        }
        setToken(response.user.token)
        setIsSuccessfullSubmit(true)
        setCurrentUserState(state => ({
            ...state,
            isLoggedIn: true,
            isLoading: false,
            currentUser: response.user
        }))
    }, [response, setToken, setCurrentUserState])

    if (isSuccessfullSubmit) {
        return <Redirect to="/"/>
    }

    return (
        <div className="auth-page">
            <div className="container">
                <div className="row">
                    <div className="col-md-6 offset-md-3 col-xs-12">
                        <h1 className="text-xs-center">{pageTitle}</h1>
                        <p className="text-xs-center">
                            <Link to={descriptionLink}>{descriptionText}</Link>
                        </p>
                        <form onSubmit={handleSubmit}>
                            {console.log(error)}
                            {error && <BackendErrorMesssages backendErrors={error.errors}/>}
                            <fieldset>
                                {!isLogin && (
                                    <fieldset className="form-group">
                                        <input
                                            type="text"
                                            className="form-control form-control-lg"
                                            placeholder="Username"
                                            value={username}
                                            onChange={e => setUsername(e.target.value)}/>
                                    </fieldset>
                                )}
                                <fieldset className="form-group">
                                    <input
                                        type="email"
                                        className="form-control form-control-lg"
                                        placeholder="Email"
                                        value={email}
                                        onChange={e => setEmail(e.target.value)}/>
                                </fieldset>
                                <fieldset className="form-group">
                                    <input
                                        type="password"
                                        className="form-control form-control-lg"
                                        placeholder="Password"
                                        value={password}
                                        onChange={e => setPassword(e.target.value)}/>
                                </fieldset>
                                <button
                                    className="btn btn-lg btn-primary pull-xs-right"
                                    type="submit"
                                    disabled={isLoading}>{pageTitle}</button>
                            </fieldset>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    )
}

export default Authentication